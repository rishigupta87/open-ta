from sqlalchemy import Column, Integer, Float, String, DateTime, Index, BigInteger, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.dialects.postgresql import UUID
from datetime import datetime
import uuid

Base = declarative_base()


class TradingInstrument(Base):
    """Trading instruments stored in TimescaleDB"""
    __tablename__ = "trading_instruments"

    id = Column(Integer, primary_key=True, index=True)
    token = Column(String, unique=True, index=True, nullable=False)
    symbol = Column(String, index=True, nullable=False)
    name = Column(String, index=True, nullable=False)
    expiry = Column(String, nullable=True)
    strike = Column(Float, nullable=True)
    lotsize = Column(Integer, nullable=False)
    instrumenttype = Column(String, index=True, nullable=False)
    exch_seg = Column(String, index=True, nullable=False)
    tick_size = Column(Float, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (
        Index('idx_symbol_exchange', 'symbol', 'exch_seg'),
        Index('idx_name_instrumenttype', 'name', 'instrumenttype'),
        Index('idx_instrumenttype_exchange', 'instrumenttype', 'exch_seg'),
    )


class MarketDataTick(Base):
    """Real-time market data ticks - TimescaleDB hypertable"""
    __tablename__ = "market_data_ticks"

    id = Column(BigInteger, primary_key=True)
    timestamp = Column(DateTime, nullable=False, index=True)
    token = Column(String, nullable=False, index=True)
    symbol = Column(String, nullable=False)
    
    # Price data
    ltp = Column(Float, nullable=False)  # Last traded price
    open_price = Column(Float)
    high_price = Column(Float)
    low_price = Column(Float)
    close_price = Column(Float)
    
    # Volume and OI
    volume = Column(BigInteger, default=0)
    oi = Column(BigInteger, default=0)  # Open Interest
    oi_change = Column(Float, default=0)
    
    # Change metrics
    change = Column(Float, default=0)
    change_percent = Column(Float, default=0)
    
    # Exchange info
    exchange = Column(String, default="MCX")
    
    __table_args__ = (
        Index('idx_timestamp_token', 'timestamp', 'token'),
        Index('idx_token_timestamp', 'token', 'timestamp'),
        Index('idx_symbol_timestamp', 'symbol', 'timestamp'),
    )


class TradingSignal(Base):
    """Trading signals generated by the signal engine"""
    __tablename__ = "trading_signals"

    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    timestamp = Column(DateTime, nullable=False, default=datetime.utcnow, index=True)
    token = Column(String, nullable=False, index=True)
    symbol = Column(String, nullable=False)
    
    # Signal details
    signal_type = Column(String, nullable=False)  # momentum, scalping, breakout, oi_spike
    action = Column(String, nullable=False)  # BUY, SELL, BULLISH, BEARISH
    strength = Column(Float, nullable=False)  # Signal strength 0-10
    confidence = Column(Float, default=0.5)  # Confidence level 0-1
    
    # Price context
    trigger_price = Column(Float, nullable=False)
    target_price = Column(Float)
    stop_loss = Column(Float)
    
    # Signal metadata
    reason = Column(String)
    data_points = Column(String)  # JSON string with supporting data
    
    # Status
    is_active = Column(Boolean, default=True)
    executed = Column(Boolean, default=False)
    
    __table_args__ = (
        Index('idx_timestamp_signal_type', 'timestamp', 'signal_type'),
        Index('idx_token_timestamp', 'token', 'timestamp'),
        Index('idx_symbol_action', 'symbol', 'action'),
        Index('idx_active_signals', 'is_active', 'timestamp'),
    )


class OptionsFlow(Base):
    """Options flow and OI analysis"""
    __tablename__ = "options_flow"

    id = Column(BigInteger, primary_key=True)
    timestamp = Column(DateTime, nullable=False, index=True)
    underlying_token = Column(String, nullable=False)  # Futures token
    option_token = Column(String, nullable=False)
    
    # Option details
    strike_price = Column(Float, nullable=False)
    option_type = Column(String, nullable=False)  # CE, PE
    expiry = Column(String, nullable=False)
    
    # Flow data
    oi_change = Column(Float, default=0)
    volume_spike = Column(Float, default=0)
    iv_change = Column(Float, default=0)  # Implied Volatility change
    
    # Analysis
    flow_type = Column(String)  # CALL_BUYING, PUT_BUYING, etc.
    sentiment = Column(String)  # BULLISH, BEARISH, NEUTRAL
    
    __table_args__ = (
        Index('idx_underlying_timestamp', 'underlying_token', 'timestamp'),
        Index('idx_strike_timestamp', 'strike_price', 'timestamp'),
        Index('idx_flow_type', 'flow_type', 'timestamp'),
    )


class CrudeoilAnalytics(Base):
    """Real-time crude oil specific analytics"""
    __tablename__ = "crudeoil_analytics"

    id = Column(BigInteger, primary_key=True)
    timestamp = Column(DateTime, nullable=False, index=True)
    
    # Price analytics
    current_price = Column(Float, nullable=False)
    sma_5 = Column(Float)  # 5-minute SMA
    sma_15 = Column(Float)  # 15-minute SMA
    sma_60 = Column(Float)  # 1-hour SMA
    
    # Volatility
    price_volatility = Column(Float)
    volume_volatility = Column(Float)
    
    # Support/Resistance
    support_level = Column(Float)
    resistance_level = Column(Float)
    
    # Options data
    total_call_oi = Column(BigInteger, default=0)
    total_put_oi = Column(BigInteger, default=0)
    put_call_ratio = Column(Float, default=0)
    
    # Volume analysis
    volume_avg = Column(Float)
    volume_spike_factor = Column(Float, default=1.0)
    
    # Sentiment indicators
    bullish_signals = Column(Integer, default=0)
    bearish_signals = Column(Integer, default=0)
    sentiment_score = Column(Float, default=0.5)  # 0=bearish, 1=bullish
    
    __table_args__ = (
        Index('idx_timestamp_price', 'timestamp', 'current_price'),
    )


class TradeExecution(Base):
    """Trade executions and P&L tracking"""
    __tablename__ = "trade_executions"

    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    timestamp = Column(DateTime, nullable=False, default=datetime.utcnow)
    
    # Trade details
    token = Column(String, nullable=False)
    symbol = Column(String, nullable=False)
    signal_id = Column(String)  # Reference to trading signal
    
    # Execution
    action = Column(String, nullable=False)  # BUY, SELL
    quantity = Column(Integer, nullable=False)
    entry_price = Column(Float, nullable=False)
    exit_price = Column(Float)
    
    # P&L
    gross_pnl = Column(Float, default=0)
    net_pnl = Column(Float, default=0)
    fees = Column(Float, default=0)
    
    # Status
    status = Column(String, default="OPEN")  # OPEN, CLOSED, CANCELLED
    strategy_name = Column(String, default="manual")
    
    __table_args__ = (
        Index('idx_timestamp_status', 'timestamp', 'status'),
        Index('idx_symbol_strategy', 'symbol', 'strategy_name'),
    )
